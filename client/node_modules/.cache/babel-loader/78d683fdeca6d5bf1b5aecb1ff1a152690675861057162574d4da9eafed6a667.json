{"ast":null,"code":"/*\r\n * apiService.js\r\n * Purpose: Provides functions to interact with the backend API for ONE - Intermittent Fasting.\r\n */\n\n/**\r\n * Function: getFastingPlans\r\n * Purpose: Fetches the fasting plans from the backend API.\r\n * It uses a relative URL which, thanks to the proxy setting in package.json,\r\n * will be automatically routed to http://localhost:5001 when in development.\r\n * @returns {Object} - The JSON response from the API or an error message on failure.\r\n */\nexport async function getFastingPlans() {\n  try {\n    // Fetch from the fasting plans endpoint; the proxy will forward this call in development\n    const response = await fetch('/api/fasting/plans');\n    // If the response is not OK, throw an error to be caught below\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error in getFastingPlans:', error);\n    return {\n      message: 'Error fetching data'\n    };\n  }\n}\n\n/**\r\n * Function: createFastingPlan\r\n * Purpose: Sends a POST request to create a new fasting plan in the backend database.\r\n * @param {Object} planData - The fasting plan data, including name, duration, description, and isPremium flag.\r\n * @returns {Object} - The JSON response from the API (the created plan) or an error message on failure.\r\n */\nexport async function createFastingPlan(planData) {\n  try {\n    const response = await fetch('/api/fasting/plans', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(planData)\n    });\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error creating fasting plan:', error);\n    return {\n      message: 'Error creating fasting plan'\n    };\n  }\n}","map":{"version":3,"names":["getFastingPlans","response","fetch","ok","Error","status","data","json","error","console","message","createFastingPlan","planData","method","headers","body","JSON","stringify"],"sources":["C:/Users/huawei/AndroidStudioProjects/One - Intermittent Fasting/client/src/apiService.js"],"sourcesContent":["/*\r\n * apiService.js\r\n * Purpose: Provides functions to interact with the backend API for ONE - Intermittent Fasting.\r\n */\r\n\r\n/**\r\n * Function: getFastingPlans\r\n * Purpose: Fetches the fasting plans from the backend API.\r\n * It uses a relative URL which, thanks to the proxy setting in package.json,\r\n * will be automatically routed to http://localhost:5001 when in development.\r\n * @returns {Object} - The JSON response from the API or an error message on failure.\r\n */\r\nexport async function getFastingPlans() {\r\n  try {\r\n    // Fetch from the fasting plans endpoint; the proxy will forward this call in development\r\n    const response = await fetch('/api/fasting/plans');\r\n    // If the response is not OK, throw an error to be caught below\r\n    if (!response.ok) {\r\n      throw new Error(`API error: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error in getFastingPlans:', error);\r\n    return { message: 'Error fetching data' };\r\n  }\r\n}\r\n\r\n/**\r\n * Function: createFastingPlan\r\n * Purpose: Sends a POST request to create a new fasting plan in the backend database.\r\n * @param {Object} planData - The fasting plan data, including name, duration, description, and isPremium flag.\r\n * @returns {Object} - The JSON response from the API (the created plan) or an error message on failure.\r\n */\r\nexport async function createFastingPlan(planData) {\r\n  try {\r\n    const response = await fetch('/api/fasting/plans', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(planData)\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`API error: ${response.status}`);\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error creating fasting plan:', error);\r\n    return { message: 'Error creating fasting plan' };\r\n  }\r\n} "],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeA,eAAeA,CAAA,EAAG;EACtC,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,CAAC;IAClD;IACA,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,cAAcH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAClD;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO;MAAEE,OAAO,EAAE;IAAsB,CAAC;EAC3C;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,iBAAiBA,CAACC,QAAQ,EAAE;EAChD,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;MACjDW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;IAC/B,CAAC,CAAC;IACF,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,cAAcH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAClD;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO;MAAEE,OAAO,EAAE;IAA8B,CAAC;EACnD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}